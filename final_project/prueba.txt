int a=1,zeta,ole=2,min, vector [32];
funcion(int i, int kd) {
    return n;
    int b [5];
    return 0;
    int b [5];
}
holi(int i, int kd) {
    int i=1,i=2;

    

    return 1+1, a, x;
}
main() {
    int b [5], b [2];
    {
        int b [5], b [2];
        printf(b);
    
    }
}

    {
        int a = 0, a = 3;
        x=2;
    }

    printf(b);
    b [0] = 123;
    printf(b[0]);
    printf(b);
    printf(b[10]);
    a,b,c = c,b,1+1;
    //b = holi();
}

    printf(a + 1);
    puts ("Hola Mundo");
    int variable;
    printf("Hola Mundo",3+5*2);
    printf(3+5*2,"Hola Mundo");
    printf(3+5*2,"Hola Mundo",2+6-7);
    printf("Hola Mundo");
    int b=2,c,ele=3;
    printf(3+3*2);
    printf(3+5<=6+7);
    printf(1 && 1 == 2 || 5 + 2 <= 3 );
    c=2;
    printf(3+3*c,3+3*c,3+2);
    while(2==2)
        {
            c=2;
            printf(3+3*c,3+3*c,3+2);
        }
    if(1+1){
        for(i=1; 1>=2; i=i+1){
        printf(a + 1);
    }
    }else{
       a=2;
         sfdcsa=2;   

    }
        if(1==1){
        for(i=1; 1>=2; i=i+1){
        printf(a + 1);
    }
    }else{
        int vector [32];
       a=2;
         sfdcsa=2;  


|IDENTIF    '='  llamada_funcion                    { if(strcmp("",$2)==0){
            
                                                                                    sprintf (temp, "(setf %s %s ) " , $1, $4 );
                                                                                }else{
                                                                                    sprintf (temp, "(setf (values %s %s ) %s ) " , $1 ,$2 ,$4 );
                                                                                }
                                                                            $$ = genera_cadena (temp) ; }



asignacion_var_fun: ',' IDENTIF asignacion_var_fun                          { sprintf (temp, "%s %s" , $2, $3);
                                                                            $$ = genera_cadena (temp) ; }
            |/*lambda*/                                                            {sprintf (temp, "");
                                                                            $$ = genera_cadena (temp) ;}
          IDENTIF '=' expresion              { sprintf (temp, "( setq %s %s ) " , $1, $3);
                                                  $$ = genera_cadena (temp) ; }
            |